#ifndef DISJ_SET_H
#define DISJ_SET_H

// DisjSets class
//
// CONSTRUCTION: with int representing initial number of sets
//
// ******************PUBLIC OPERATIONS*********************
// void union( root1, root2 ) --> Merge two sets
// int find( x )              --> Return set containing x
// ******************ERRORS********************************
// No error checking is performed

#include <vector>
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <fstream>
using namespace std;

/**
 * Disjoint set class.
 * Use union by rank and path compression.
 * Elements in the set are numbered starting at 0.
 */


class DisjSets
{
  public:
    explicit DisjSets( int numElements );

    int find( int x ) const;
    int find( int x );
    void unionSets( int root1, int root2 );

  private:
    vector<int> s;
};

/*Board cell class is a class that contains all necessary information for each cell
of the game board. This includes walls for north,south,east, and west, cell number, and 
a integer for whether it is visited or not*/
class boardCell
{
public:
	//Initializes all cells to have all walls up and not be visited//
	boardCell()
	{
		up=1;
		down=1;
		left=1;
		right=1;
		cellNum=-1;
		visited=0;
	};


	//Manipulators for all data members//
	void asgUp(int num);
	void asgDown(int num);
	void asgLeft(int num);
	void asgRight(int num);
	void asgcellNum(int num);
	void asgvisited(int num);

	//Accessors for all data members//
	int getup(void);
	int getdown(void);
	int getleft(void);
	int getright(void);
	int getcellNum(void);
	int getvisited(void);

//Private data members, directions represent walls//
private:
	int up;
	int down;
	int left;
	int right;
	int cellNum;
	int visited;

};

void printBoard( vector<vector<boardCell>> &board,int size); //Print a board based off of a game board input and the number of rows//
void initializeBoard( vector<vector<boardCell>> &board,int size,DisjSets &s); //Create a random board that has a solution based off of size//
void solveBFT(vector<vector<boardCell>> &board,int size); //Solve the maze generated by initializeBoard by using a broad search algorithm//
void solveDFT(vector<vector<boardCell>> &board,int size);

#endif